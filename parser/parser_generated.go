package parser

import (
	"compiler/ast"
	"compiler/parsergenerator"
	"compiler/scanner"
	"compiler/token"
	"fmt"
)

// NewGeneratedParser creates a new parser using the generated LR(1) parser.
func NewGeneratedParser(s scanner.Scanner) *GeneratedParser {
	productions := GrammarSpec()
	parser := parsergenerator.NewParser(productions)
	return &GeneratedParser{
		scanner: s,
		parser:  parser,
	}
}

// GeneratedParser wraps the parser generated by the parser generator.
type GeneratedParser struct {
	scanner scanner.Scanner
	parser  *parsergenerator.Parser
}

// ParseProgram parses the input and returns the AST.
func (p *GeneratedParser) ParseProgram() *ast.Program {
	tokens := []token.Token{}
	for tok := p.scanner.NextToken(); tok.Type != token.EOF; tok = p.scanner.NextToken() {
		tokens = append(tokens, tok)
	}
	astNode, err := p.parser.Parse(tokens)
	if err != nil {
		// Handle parse error
		fmt.Printf("Parse error: %s\n", err)
		return nil
	}
	program, ok := astNode.(*ast.Program)
	if !ok {
		// Handle type assertion error
		fmt.Printf("Parse result is not an *ast.Program. Got %T\n", astNode)
		return nil
	}
	return program
}
